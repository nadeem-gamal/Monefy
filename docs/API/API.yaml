openapi: 3.0.3
info:
  title: Swagger Monefy - OpenAPI 3.0
  description: |-
    This is a sample Money Manager Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Monefy repository](https://github.com/nadeem-gamal/Monefy)
    - [The source API definition for the Monefy](https://github.com/nadeem-gamal/Monefy/blob/master/docs/API/API.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost/api/v3
tags:
  - name: category
    description: Operations about category
  - name: currency
    description: Operations about currency
  - name: transaction
    description: Operations about transaction
  - name: account
    description: Access to accounts
  - name: user
    description: Operations about user
paths:
  /category:
    put:
      tags:
        - category
      summary: Update an existing category
      description: Update an existing category by Id
      operationId: updateCategory
      requestBody:
        description: Update an existent category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
        '405':
          description: Validation exception
      security:
        - monefy_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - category
      summary: Add a new category
      description: Add a new category
      operationId: addCategory
      requestBody:
        description: Create a new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'          
        '405':
          description: Invalid input
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: View category by ID
      description: Returns a single category
      operationId: getCategoryById
      parameters:
        - name: categoryId
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
      security:
        - api_key: []
        - monefy_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - category
      summary: Deletes a category
      description: delete a category
      operationId: deleteCategory
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: categoryId
          in: path
          description: Category id to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '400':
          description: Invalid category value
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /category/getAll:
    get:
      tags:
        - category
      summary: Get all categories 
      description: ''
      operationId: getAllCategories
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'          
      security:
        - monefy_auth:
            - write:pets
            - read:pets

  /currency:
    put:
      tags:
        - currency
      summary: Update an existing currency
      description: Update an existing currency by Id
      operationId: updateCurrency
      requestBody:
        description: Update an existent currency
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '400':
          description: Invalid ID supplied
        '404':
          description: Currency not found
        '405':
          description: Validation exception
      security:
        - monefy_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - currency
      summary: Add a new currency
      description: Add a new currency
      operationId: addCurrency
      requestBody:
        description: Create a new currency
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'          
        '405':
          description: Invalid input
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /currency/{currencyId}:
    get:
      tags:
        - currency
      summary: View currency by ID
      description: Returns a single currency
      operationId: getCurrencyById
      parameters:
        - name: currencyId
          in: path
          description: ID of currency to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '400':
          description: Invalid ID supplied
        '404':
          description: Currency not found
      security:
        - api_key: []
        - monefy_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - currency
      summary: Deletes a currency
      description: delete a currency
      operationId: deleteCurrency
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: currencyId
          in: path
          description: Currency id to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '400':
          description: Invalid currency value
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /currency/getAll:
    get:
      tags:
        - currency
      summary: Get all currencies
      description: ''
      operationId: getAllCurrencies
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
      security:
        - monefy_auth:
            - write:pets
            - read:pets


  /account:
    put:
      tags:
        - account
      summary: Update an existing account
      description: Update an existing account by Id
      operationId: updateAccount
      requestBody:
        description: Update an existent account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
        '405':
          description: Validation exception
      security:
        - monefy_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - account
      summary: Add a new account
      description: Add a new account
      operationId: addAccount
      requestBody:
        description: Create a new account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'          
        '405':
          description: Invalid input
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /account/{accountId}:
    get:
      tags:
        - account
      summary: View account by ID
      description: Returns a single account
      operationId: getAccountById
      parameters:
        - name: accountId
          in: path
          description: ID of account to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid ID supplied
        '404':
          description: Account not found
      security:
        - api_key: []
        - monefy_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - account
      summary: Deletes an account
      description: delete an account
      operationId: deleteAccount
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: accountId
          in: path
          description: Account id to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '400':
          description: Invalid account value
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /account/getAll:
    get:
      tags:
        - account
      summary: Get all accounts
      description: ''
      operationId: getAllAccounts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
      security:
        - monefy_auth:
            - write:pets
            - read:pets

  /transaction:
    put:
      tags:
        - transaction
      summary: Update an existing transaction
      description: Update an existing transaction by Id
      operationId: updateTransaction
      requestBody:
        description: Update an existent transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found
        '405':
          description: Validation exception
      security:
        - monefy_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - transaction
      summary: Add a new transaction
      description: Add a new transaction
      operationId: addTransaction
      requestBody:
        description: Create a new transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'          
        '405':
          description: Invalid input
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /transaction/{transactionId}:
    get:
      tags:
        - transaction
      summary: View transaction by ID
      description: Returns a single transaction
      operationId: getTransactionById
      parameters:
        - name: transactionId
          in: path
          description: ID of transaction to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found
      security:
        - api_key: []
        - monefy_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - transaction
      summary: Deletes a transaction
      description: delete a transaction
      operationId: deleteTransaction
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: transactionId
          in: path
          description: Transaction id to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '400':
          description: Invalid transaction value
      security:
        - monefy_auth:
            - write:pets
            - read:pets
  /transaction/getAll:
    get:
      tags:
        - transaction
      summary: Get all transactions 
      description: ''
      operationId: getAllTransactions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'          
      security:
        - monefy_auth:
            - write:pets
            - read:pets

  /user/signup:
    post:
      tags:
        - user
      summary: Create new user
      description: ''
      operationId: signup
      requestBody:
        description: Create a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid username supplied
  /user/verifyEmail:
    post:
      tags:
        - user
      summary: Verify email
      description: ''
      operationId: verifyEmail
      requestBody:
        description: Verify email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid email supplied
  /user/login:
    get:
      tags:
        - user
      summary: Login
      description: ''
      operationId: login
      parameters:
        - name: username
          in: header
          required: true
          schema:
            type: string
        - name: password
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid username or password supplied
        '404':
          description: User not found
  /user/logout:
   get:
      tags:
        - user
      summary: Logout
      description: ''
      operationId: logout
      responses:
        default:
          description: successful operation
  /user/changePassword:
    put:
      tags:
        - user
      summary: Change password
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid password
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Bills
        image:
          type: string
          example: car
        type:
          type: boolean
          description: 'True: Income, False: Expense'
          example: true
    Currency:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        name:
          type: string
          example: Egyptian Pound
        symbol:
          type: string
          example: EGP
        # image:
        #   type: string
        #   example: cash
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 100000
        name:
          type: string
          example: Cash
        currency:
          $ref: '#/components/schemas/Currency'
        image:
          type: string
          example: car
        initial_account_balance:
          type: number
          format: float
        initial_balance_date:
          type: string
          format: date
        enabled:
          type: boolean
        balance:
          type: number
          format: float
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        date:
          type: string
          format: date
        category:
          type: string
        amount:
          type: number
          format: float
        description:
          type: string
        transaction_type:
          type: boolean
          description: 'True: Transaction, False: Transfer'
          example: true
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Category:
      description: Category object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    monefy_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://localhost/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header